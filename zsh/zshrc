# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#Set emacs style keyboard shortcuts, because they mirror bash's defaults so well...
bindkey -e

# Load zinit
declare -A ZINIT
ZINIT[HOME_DIR]=~/.shell/zsh/zinit
source ~/.shell/zsh/zinit/bin/zinit.zsh

autoload -U promptinit; promptinit

autoload -Uz compinit
compinit
zstyle ':completion:*' menu select

# Source my aliases and functions
source ~/.shell/zsh/aliases.zsh
source ~/.shell/zsh/functions.zsh
source ~/.shell/zsh/fzf.zsh

#auto cd into dir without typing cd
setopt auto_cd

# Setup Directory stack
setopt auto_pushd autopushd pushdminus pushdsilent pushdtohome pushd_ignore_dups

#Load zinit plugins
zinit light zdharma-continuum/fast-syntax-highlighting
#zinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh
zinit snippet OMZ::lib/history.zsh
zinit light zsh-users/zsh-history-substring-search
zinit snippet https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker
zinit light zsh-users/zsh-autosuggestions
zinit snippet OMZ::plugins/web-search/web-search.plugin.zsh
zinit snippet OMZ::plugins/kubectl
zinit snippet OMZ::plugins/aws
zinit snippet OMZ::plugins/docker-compose
zinit snippet OMZ::plugins/fzf
zinit snippet OMZ::plugins/asdf
zinit snippet OMZ::plugins/uv
#zinit snippet https://iterm2.com/shell_integration/zsh

# I use AWS config file, setting this is a no-brainer
export AWS_SDK_LOAD_CONFIG=1

# gpg-agent
export GPG_TTY=$(tty)

# Setup SSH to use secure enclave
#export SSH_AUTH_SOCK=/Users/danielgadd/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh

#powerline theme
zinit ice depth=1; zinit light romkatv/powerlevel10k

# Load helm autocomplete, built into helm
if [ $commands[helm] ]; then
  source <(helm completion zsh)
fi

# ccloud zsh autocomplete; built into ccloud
if [ $commands[ccloud] ]; then
  ccloud completion zsh > ${fpath[1]}/_ccloud
fi

# asdf autocomplete
#. /opt/homebrew/opt/asdf/libexec/asdf.sh

# Setup AWS Granted
# Disabled; This is quite annoying - Until they improve it, Ill do manually
#export GRANTED_ENABLE_AUTO_REASSUME=true
fpath=(/Users/danielgadd/.granted/zsh_autocomplete/assume/ $fpath)
fpath=(/Users/danielgadd/.granted/zsh_autocomplete/granted/ $fpath)

# Setup brew autocomplete
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

# aws autocomplete functions
complete -C 'aws_completer' aws
complete -C 'aws_completer' awslocal

# Some Custom Autocomplete stuff
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*' file-sort modification reverse
zstyle ':completion:*:default' menu 'select=0'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' list-colors ''
zstyle ':completion::complete:cd:' tag-order local-directories path-directories
zstyle ':completion:*:functions' ignored-patterns '_*'                          # don't auto-complete internal functions (ones prefixed with _)
zstyle ':completion:*:warnings' format $'\e[01;31m-- No Matches Found --\e[0m'
zstyle ':completion:*:descriptions' format $'\e[01;33m-- %d --\e[0m'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' special-dirs true

# Docker needs some special config for autocomplete
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes


# Some functions, like _apt, _dpkg and man are very slow. You can use a cache in order to proxy the list of results (like the list of available debian packages) Use a cache:
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path ~/.shell/zsh/cache/

# Command History
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt NO_HIST_BEEP
setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_DUPS
setopt HIST_REDUCE_BLANKS

# Allow substring search
source ~/.shell/zsh/zinit/plugins/zsh-users---zsh-history-substring-search/zsh-history-substring-search.zsh

# key bindings
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        history-substring-search-up
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      history-substring-search-down
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[ShiftTab]}"  ]] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start {
		echoti smkx
	}
	function zle_application_mode_stop {
		echoti rmkx
	}
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# TODO: Do I need this?
# Load fzf integration
#[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p9k_configure` or edit ~/.p10k.zsh.
source ~/.p10k.zsh

export EDITOR="/usr/bin/vim"

# Set environment variables, like lscolor to make ls pretty (generated from: https://geoff.greer.fm/lscolors/)
export LSCOLORS="GxfxcxdxBxegedabagacad"

# p10k custom options (setting as env variable means I can make changes without touching ~/.p10k.conf - need to do this at the end,
# otherwise the sourcing of the theme resets the env variables.
#export POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir vcs prompt_char)
export POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir vcs)

# Setup PATH
export PATH="${PATH}:${HOME}/bin"


#Add Krew to path
export PATH="${PATH}:${HOME}/.krew/bin"

# Add NPM
#export PATH="$PATH:$HOME/.npm-global/bin"

# Add pipx
export PATH="$PATH:$HOME/.local/bin"

# Setup vscode shell integration
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"

#export NVM_DIR="$HOME/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Add ASDF to PATH
#export PATH="$PATH:${ASDF_DATA_DIR:-$HOME/.asdf}/shims"

# set ssh-agent
# export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/ssh-agent.socket"

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/aws-sso aws-sso

