[toplevel]

# Who am I logged in as?
whoami = sts get-caller-identity

# AWS SSM sessions, without the extra
ssm-ec2 = ssm start-session --target

# Table list all instances in current context
instances = ec2 describe-instances --query "Reservations[*].Instances[*].{Name: Tags[?Key=='Name'] | [0].Value, instance_id: InstanceId, ip_address: PrivateIpAddress, state: State.Name, type: InstanceType, public_ip: PublicIpAddress, zone: Placement.AvailabilityZone}" --output table

# Above, but a simple list, used for the ssmc zsh alias
ssmc-instance-list = ec2 describe-instances --query "Reservations[*].Instances[*].{name: Tags[?Key=='Name'] | [0].Value, instance_id: InstanceId}" --filter Name=instance-state-name,Values=running --output text

# Table list VPCs in current context
vpcs = ec2 describe-vpcs --query "Vpcs[*].{name: Tags[?Key=='Name'] | [0].Value, vpc_id: VpcId, CIDR: CidrBlock, state: State}" --output table

# Some SG Groups stuff..
myip =
  !f() {
    curl ipv4.icanhazip.com
  }; f

# Allow my IP on a SG (Great for testing) - Usage: aws allow-my-ip sg_id protocol port
allow-my-ip =
  !f() {
    my_ip=$(aws myip)
    aws ec2 authorize-security-group-ingress --group-id ${1} --protocol ${2} --port ${3} --cidr $my_ip/32
  }; f

# Above alias, but reversed to delete my IP
revoke-my-ip =
  !f() {
    my_ip=$(aws myip)
    aws ec2 revoke-security-group-ingress --group-id ${1} --protocol ${2} --port ${3} --cidr $my_ip/32
  }; f

# Show rules for a specific SG
sg-rules = !f() { aws ec2 describe-security-groups \
    --query "SecurityGroups[].IpPermissions[].[FromPort,ToPort,IpProtocol,join(',',IpRanges[].CidrIp)]" \
    --group-id "$1" --output text; }; f

# List Child Accounts in an AWS organisation - as a table
accounts = organizations list-accounts --query "Accounts[].{Name: Name, ID: Id, Status: Status}" --output table --no-paginate
